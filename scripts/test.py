import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import UnivariateSpline
import numpy as np
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy.interpolate import interp1d

def exp_func(t, a, b, c):
    return a * np.exp(-b * t) + c



# Given data
time_data = np.array(
[[ 0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5],
 [ 1. ,  1. ,  1. ,  1. ,  1. ,  1. ,  1. ],
 [ 1.5,  1.5,  1.5,  1.5,  1.5,  1.5,  1.5],
 [ 2. ,  2. ,  2. ,  2. ,  2. ,  2. ,  2. ],
 [ 2.5,  2.5,  2.5,  2.5,  2.5,  2.5,  2.5],
 [ 3. ,  3. ,  3. ,  3. ,  3. ,  3. ,  3. ],
 [ 3.5,  3.5,  3.5,  3.5,  3.5,  3.5,  3.5],
 [ 4. ,  4. ,  4. ,  4. ,  4. ,  4. ,  4. ],
 [ 4.5,  4.5,  4.5,  4.5,  4.5,  4.5,  4.5],
 [ 5. ,  5. ,  5. ,  5. ,  5. ,  5. ,  5. ],
 [ 5.5,  5.5,  5.5,  5.5,  5.5,  5.5,  5.5],
 [ 6. ,  6. ,  6. ,  6. ,  6. ,  6. ,  6. ],
 [ 6.5,  6.5,  6.5,  6.5,  6.5,  6.5,  6.5],
 [ 7. ,  7. ,  7. ,  7. ,  7. ,  7. ,  7. ],
 [ 7.5,  7.5,  7.5,  7.5,  7.5,  7.5,  7.5],
 [ 8. ,  8. ,  8. ,  8. ,  8. ,  8. ,  8. ],
 [ 8.5,  8.5,  8.5,  8.5,  8.5,  8.5,  8.5],
 [ 9. ,  9. ,  9. ,  9. ,  9. ,  9. ,  9. ],
 [ 9.5,  9.5,  9.5,  9.5,  9.5,  9.5,  9.5],
 [10. , 10. , 10. , 10. , 10. , 10. , 10. ],
 [10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5],
 [11. , 11. , 11. , 11. , 11. , 11. , 11. ],
 [11.5, 11.5, 11.5, 11.5, 11.5, 11.5, 11.5],
 [12. , 12. , 12. , 12. , 12. , 12. , 12. ],
 [12.5, 12.5, 12.5, 12.5, 12.5, 12.5, 12.5],
 [13. , 13. , 13. , 13. , 13. , 13. , 13. ],
 [13.5, 13.5, 13.5, 13.5, 13.5, 13.5, 13.5],
 [14. , 14. , 14. , 14. , 14. , 14. , 14. ],
 [14.5, 14.5, 14.5, 14.5, 14.5, 14.5, 14.5],
 [15. , 15. , 15. , 15. , 15. , 15. , 15. ],
 [15.5, 15.5, 15.5, 15.5, 15.5, 15.5, 15.5],
 [16. , 16. , 16. , 16. , 16. , 16. , 16. ],
 [16.5, 16.5, 16.5, 16.5, 16.5, 16.5, 16.5],
 [17. , 17. , 17. , 17. , 17. , 17. , 17. ],
 [17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 17.5],
 [18. , 18. , 18. , 18. , 18. , 18. , 18. ],
 [18.5, 18.5, 18.5, 18.5, 18.5, 18.5, 18.5],
 [19. , 19. , 19. , 19. , 19. , 19. , 19. ],
 [19.5, 19.5, 19.5, 19.5, 19.5, 19.5, 19.5],
 [20. , 20. , 20. , 20. , 20. , 20. , 20. ]]
)
position_data = np.array(
[[-7.68374679e-01,  2.70226989e-02, -3.19391382e-06, -3.02671905e-04, 0.00000000e+00,  6.70173148e-02,  0.00000000e+00],
 [-7.18632904e-01,  7.67614268e-02, -7.61636133e-07, -3.03257380e-04, 0.00000000e+00,  1.00696493e-01,  0.00000000e+00],
 [-6.49544624e-01,  1.26504022e-01, -7.49855234e-05, -1.60273625e-04, 0.00000000e+00,  1.18375515e-01,  0.00000000e+00],
 [-6.85580819e-01,  1.09811234e-01,  4.80192960e-06, -7.10569400e-06, 0.00000000e+00,  1.17692030e-01,  0.00000000e+00],
 [-6.84759884e-01,  9.34487849e-02,  3.55159119e-04,  3.05782719e-04, 0.00000000e+00,  1.01646441e-01,  0.00000000e+00],
 [-6.81658570e-01,  4.43667639e-02,  2.68437221e-04,  1.60123436e-04, 0.00000000e+00,  8.55525582e-02,  0.00000000e+00],
 [-6.66601373e-01, -3.74348399e-02,  1.69804302e-04,  2.64525361e-04, 0.00000000e+00,  1.01261798e-01,  0.00000000e+00],
 [-6.24687088e-01, -1.34290155e-01,  4.33309650e-06, -1.15393202e-04, 0.00000000e+00,  1.17365418e-01,  0.00000000e+00],
 [-5.50049695e-01, -2.13474264e-01,  3.42322452e-04,  5.41294708e-05, 0.00000000e+00,  1.02911763e-01,  0.00000000e+00],
 [-5.95549622e-01, -1.82063437e-01, -4.99584275e-04, -1.05826138e-03, 0.00000000e+00,  1.17711503e-01,  0.00000000e+00],
 [-5.79187632e-01, -1.82645894e-01, -1.55845938e-03, -2.04286900e-03, 0.00000000e+00,  1.27932871e-01,  0.00000000e+00],
 [-5.30101198e-01, -1.85463119e-01, -1.54783997e-03, -2.05755743e-03, 0.00000000e+00,  1.32279007e-01,  0.00000000e+00],
 [-4.48289951e-01, -1.88188421e-01, -1.76412103e-03, -2.22869780e-03, 0.00000000e+00,  1.30529355e-01,  0.00000000e+00],
 [-3.33753947e-01, -1.88584030e-01, -1.52267860e-03, -2.14154142e-03, 0.00000000e+00,  1.30935527e-01,  0.00000000e+00],
 [-1.86493235e-01, -1.88743062e-01, -1.61357934e-03, -2.20376736e-03, 0.00000000e+00,  1.30502729e-01,  0.00000000e+00],
 [-6.50776184e-03, -1.89089161e-01, -1.63441224e-03, -1.72789057e-03, 0.00000000e+00,  1.31675410e-01,  0.00000000e+00],
 [ 2.06202223e-01, -1.89193922e-01, -1.56152706e-03, -2.01766211e-03, 0.00000000e+00,  1.29783382e-01,  0.00000000e+00],
 [ 4.51634342e-01, -1.72857268e-01, -1.40053080e-03, -2.42908443e-03, 0.00000000e+00,  1.30564025e-01,  0.00000000e+00],
 [ 6.97064076e-01, -1.23797237e-01, -1.50007336e-03, -1.91415952e-03, 0.00000000e+00,  1.31365765e-01,  0.00000000e+00],
 [ 9.09769026e-01, -4.20143508e-02, -1.38535190e-03, -2.14452462e-03, 0.00000000e+00,  1.31483309e-01,  0.00000000e+00],
 [ 1.08974937e+00,  7.24847246e-02, -1.31540904e-03, -1.82664119e-03, 0.00000000e+00,  1.31150360e-01,  0.00000000e+00],
 [ 1.23700498e+00,  1.86976818e-01, -1.51726537e-03, -2.14781674e-03, 0.00000000e+00,  1.30866192e-01,  0.00000000e+00],
 [ 1.35153570e+00,  2.68744791e-01, -1.41799861e-03, -2.00003290e-03, 0.00000000e+00,  1.30832317e-01,  0.00000000e+00],
 [ 1.43334157e+00,  3.17788255e-01, -1.93389581e-03, -2.07673032e-03, 0.00000000e+00,  1.30945755e-01,  0.00000000e+00],
 [ 1.40061984e+00,  3.01447620e-01, -2.94659362e-03, -2.11256797e-03, 0.00000000e+00,  1.30875117e-01,  0.00000000e+00],
 [ 1.38425739e+00,  2.85085244e-01, -3.53870907e-03, -2.11900855e-03, 0.00000000e+00,  1.30879686e-01,  0.00000000e+00],
 [ 1.33517007e+00,  2.35999383e-01, -3.67403808e-03, -2.46528843e-03, 0.00000000e+00,  1.30861325e-01,  0.00000000e+00],
 [ 1.25335789e+00,  1.54191373e-01, -3.52877468e-03, -2.26518010e-03, 0.00000000e+00,  1.30836423e-01,  0.00000000e+00],
 [ 1.13882085e+00,  7.23242894e-02, -3.56309634e-03, -2.04903644e-03, 0.00000000e+00,  1.30846765e-01,  0.00000000e+00],
 [ 9.91559245e-01,  2.31179756e-02, -3.46939382e-03, -2.32061595e-03, 0.00000000e+00,  1.30873228e-01,  0.00000000e+00],
 [ 8.11573086e-01,  6.63268495e-03, -3.55952909e-03, -2.20183440e-03, 0.00000000e+00,  1.30890057e-01,  0.00000000e+00],
 [ 5.98987408e-01,  2.28672521e-02, -3.52809517e-03, -2.28129831e-03, 0.00000000e+00,  1.30893771e-01,  0.00000000e+00],
 [ 7.13398797e-01,  6.57114946e-03, -3.46616552e-03, -2.13527730e-03, 0.00000000e+00,  1.30892736e-01,  0.00000000e+00],
 [ 7.29741973e-01,  2.29285831e-02, -3.43316750e-03, -1.93642616e-03, 0.00000000e+00,  1.30890338e-01,  0.00000000e+00],
 [ 7.78767812e-01,  5.67223327e-02, -3.42142161e-03, -1.71821987e-03, 0.00000000e+00,  1.30886807e-01,  0.00000000e+00],
 [ 8.27770776e-01,  7.52428718e-02, -3.42583859e-03, -1.78440855e-03, 0.00000000e+00,  1.30886755e-01,  0.00000000e+00],
 [ 8.44048941e-01,  6.15806774e-02, -3.42918865e-03, -1.90901487e-03, 0.00000000e+00,  1.30881912e-01,  0.00000000e+00],
 [ 8.27611174e-01,  4.78905176e-02, -3.42883273e-03, -1.82876717e-03, 0.00000000e+00,  1.30874896e-01,  0.00000000e+00],
 [ 8.04279925e-01,  5.71740718e-02, -3.42582647e-03, -1.76979033e-03, 0.00000000e+00,  1.30881418e-01,  0.00000000e+00],
 [ 8.04279925e-01,  5.71740718e-02, -3.42582647e-03, -1.76979033e-03, 0.00000000e+00,  1.30881418e-01,  0.00000000e+00]]
)

def poly5(x, a, b, c, d, e, f):
    return a*x**5 + b*x**4 + c*x**3 + d*x**2 + e*x + f

time = time_data[:, 0]

# Create a finer time grid
time_fine = np.linspace(time.min(), time.max(), num=1000)

# Curve fit each joint and plot the position-time graph
joints = position_data.shape[1]

fine_tuned_time_data = np.tile(time_fine, (7, 1)).T
fine_tuned_position_data = np.zeros((len(time_fine), 7))

# Interpolate and store fine-tuned position data
for joint in range(7):
    interp_func = interp1d(time, position_data[:, joint], kind='cubic')
    fine_tuned_position_data[:, joint] = interp_func(time_fine)

plt.figure(figsize=(14, 8))
for joint in range(joints):
    # Interpolate the position data
    interp_func = interp1d(time, position_data[:, joint], kind='cubic')
    position_fine = interp_func(time_fine)
    
    # Store fine-tuned position data
    fine_tuned_position_data[:, joint] = position_fine
    
    # Fit the polynomial curve to the finer data
    params, _ = curve_fit(poly5, time_fine, position_fine)
    
    # Generate fitted data
    fitted_positions = poly5(time_fine, *params)
    
    # Plot original, interpolated, and fitted data
    plt.subplot(3, 3, joint + 1)
    plt.plot(time, position_data[:, joint], 'o', label='Original Data', markersize=4)
    plt.plot(time_fine, position_fine, '--', label='Interpolated', linewidth=1)
    plt.plot(time_fine, fitted_positions, '-', label='Fitted Curve', linewidth=1.5)
    plt.xlabel('Time (s)')
    plt.ylabel('Position (rad)')
    plt.title(f'Joint {joint}')
    plt.legend()
    plt.tight_layout()

plt.suptitle("Position-Time Graphs with Discretization and Curve Fitting", y=1.02)
plt.show()

# Print the shape of the fine-tuned data array
print("Shape of fine-tuned data array:", fine_tuned_position_data.shape)

# Print the first few rows of the fine-tuned data
print("\nFirst few rows of fine-tuned data:")
print(fine_tuned_time_data[:5])
